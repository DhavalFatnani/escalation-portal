{
  "meta": {
    "project": "Escalation Portal",
    "date": "2025-10-04",
    "prepared_by": "Generated by TestSprite"
  },
  "product_overview": "The Escalation Portal is a secure full-stack web application designed to streamline structured escalation workflows between Growth and Operations teams. It centralizes ticket management and resolution processes with robust role-based access, providing complete audit trails and peer-approval workflows for attachments.",
  "core_goals": [
    "Enable bidirectional ticket lifecycle management between Growth and Ops teams with role-based permissions.",
    "Provide secure JWT-based authentication with multi-role access controls (Growth, Ops, Admin).",
    "Allow Growth users to create and manage escalation tickets with mandatory fields and unique ticket identifiers.",
    "Support Ops users in adding resolution remarks and processing tickets, with options to reopen or close by Growth users.",
    "Implement a peer-approval workflow with OTP verification for sensitive file attachment deletion.",
    "Offer advanced search, filtering, and pagination for efficient ticket handling.",
    "Ensure complete and chronological activity timeline for auditing all ticket actions.",
    "Provide administrators with user management and system configuration capabilities.",
    "Guarantee security standards with input validation, rate limiting, CORS, Helmet security headers, and data protection against common web threats."
  ],
  "key_features": [
    "JWT-based authentication with role-based access control supporting Growth, Ops, and Admin roles.",
    "Dashboard displaying ticket statistics and recent ticket activity with navigable filter cards.",
    "Full lifecycle bidirectional ticket management allowing both teams to create, resolve, reopen, and close tickets with audit logging.",
    "Ticket creation forms with required brand name, description, issue type, and priority, generating unique formatted ticket numbers.",
    "Ops users can add resolution remarks and mark tickets as processed, Growth users can reopen or accept and close tickets.",
    "Ability to upload and manage file attachments categorized by context (initial, resolution, reopening) with size and quantity limits.",
    "Peer-approval for file deletion involving reason submission, OTP generation by opposite team, OTP confirmation and deletion.",
    "Advanced search and filtering over tickets including status, priority, brand, creator, assignee, and date range with pagination.",
    "Complete chronological activity timeline showing all ticket actions with actor, timestamps, and detailed comments.",
    "Admin features for user management, password changes, and system settings.",
    "Security features including bcrypt password hashing, JWT expiration, input validation with Zod, SQL injection protections, and rate limiting."
  ],
  "user_flow_summary": [
    "Ticket Creation Workflow (Growth): User logs in, accesses New Ticket page, fills form with required fields, uploads initial files optionally, submits, system generates unique ticket number, ticket created with status 'open', activity logged, user redirected to ticket detail page.",
    "Ticket Resolution Workflow (Ops): Ops user views open/re-opened tickets, reviews details, adds mandatory resolution remarks, optionally uploads resolution files, marks ticket as processed, assignment updated, activity logged.",
    "Ticket Review Workflow (Growth): Growth user opens processed ticket, reviews resolution, either accepts and closes ticket or reopens with reason, activity logged, ticket status updates accordingly.",
    "File Deletion Approval: User requests deletion with reason, request sent to opposite team, approver reviews and approves generating OTP, requester enters OTP for verification, file deleted upon successful OTP validation, activity logged."
  ],
  "validation_criteria": [
    "Successful login issues JWT token and enforces role permissions across UI and API.",
    "Ticket creation enforces required fields and generates unique ticket numbers correctly.",
    "Ticket status transitions correctly on resolution, reopening, and closing with proper role restrictions.",
    "File upload enforces count (max 5) and size (max 20MB) with correct categorization based on upload context.",
    "Deletion workflow successfully requests, approves with OTP generation, verifies OTP, and deletes file only upon validation.",
    "Search and filtering return accurate filtered ticket lists with pagination.",
    "Activity timeline logs all actions verbatim in chronological order and updates live after changes.",
    "Admin functions enforce permission checks and allow managing users and settings.",
    "Security measures including bcrypt password hashing, JWT expiration, input validation, SQL injection prevention, and rate limiting are properly operational.",
    "UI responsiveness and loading times meet performance requirements with clear error and success messages."
  ],
  "code_summary": {
    "project_name": "Escalation Portal",
    "project_type": "full-stack web application",
    "tech_stack": {
      "frontend": {
        "framework": "React 18",
        "language": "TypeScript",
        "build_tool": "Vite",
        "ui_framework": "Tailwind CSS",
        "state_management": [
          "Zustand",
          "TanStack Query"
        ],
        "routing": "React Router v6",
        "http_client": "Axios",
        "icons": "Lucide React",
        "form_handling": "React Hook Form"
      },
      "backend": {
        "runtime": "Node.js",
        "framework": "Express",
        "language": "TypeScript",
        "database": "PostgreSQL",
        "authentication": "JWT with bcrypt",
        "validation": "Zod",
        "logging": "Winston",
        "security": [
          "Helmet",
          "CORS",
          "express-rate-limit"
        ]
      },
      "database": {
        "type": "PostgreSQL 15+",
        "features": [
          "UUID primary keys",
          "Full-text search (tsvector)",
          "JSONB support",
          "Triggers and functions"
        ]
      }
    },
    "features": [
      {
        "name": "authentication",
        "description": "JWT-based authentication with role-based access control supporting growth, ops, and admin roles",
        "files": [
          "backend/src/routes/auth.ts",
          "backend/src/middleware/auth.ts",
          "frontend/src/pages/LoginPage.tsx",
          "frontend/src/services/authService.ts",
          "frontend/src/stores/authStore.ts"
        ]
      },
      {
        "name": "dashboard",
        "description": "Overview dashboard displaying ticket statistics and recent tickets with quick navigation",
        "files": [
          "frontend/src/pages/DashboardPage.tsx",
          "frontend/src/pages/AdminDashboard.tsx"
        ]
      },
      {
        "name": "bidirectional_ticket_management",
        "description": "Complete bidirectional ticket lifecycle - both Growth and Ops teams can create tickets and resolve tickets for each other with role-based permissions",
        "files": [
          "backend/src/routes/tickets.ts",
          "backend/src/services/ticketService.ts",
          "frontend/src/pages/TicketsListPage.tsx",
          "frontend/src/pages/CreateTicketPage.tsx",
          "frontend/src/pages/TicketDetailPage.tsx",
          "frontend/src/services/ticketService.ts"
        ]
      },
      {
        "name": "ticket_creation",
        "description": "Both Growth and Ops users can create tickets with mandatory fields (brand name, description, issue type, priority). Generates unique ticket numbers in format GROW-YYYYMMDD-NNNN or OPS-YYYYMMDD-NNNN",
        "files": [
          "frontend/src/pages/CreateTicketPage.tsx",
          "backend/src/routes/tickets.ts"
        ]
      },
      {
        "name": "ticket_resolution",
        "description": "Opposite team can add resolution remarks and mark tickets as processed. Supports primary resolution and updated resolution for reopened tickets",
        "files": [
          "frontend/src/pages/TicketDetailPage.tsx",
          "backend/src/routes/tickets.ts",
          "backend/src/services/ticketService.ts"
        ]
      },
      {
        "name": "ticket_reopen_close",
        "description": "Ticket creator can reopen processed tickets with reason or accept and close them",
        "files": [
          "frontend/src/pages/TicketDetailPage.tsx",
          "backend/src/routes/tickets.ts"
        ]
      },
      {
        "name": "file_attachments",
        "description": "Upload and manage files with context-aware categorization (initial, resolution, reopen, additional). Supports up to 5 files per upload, 20MB each",
        "files": [
          "frontend/src/components/FileUpload.tsx",
          "frontend/src/components/FilePreviewModal.tsx",
          "backend/src/routes/attachments.ts",
          "frontend/src/services/attachmentService.ts"
        ]
      },
      {
        "name": "deletion_approval_workflow",
        "description": "Peer-approval workflow for file deletion with OTP verification. Requester provides reason, opposite team approves and generates OTP, requester enters OTP to delete",
        "files": [
          "frontend/src/pages/DeletionRequestsPage.tsx",
          "frontend/src/pages/TicketDetailPage.tsx",
          "backend/src/routes/attachments.ts"
        ]
      },
      {
        "name": "search_and_filtering",
        "description": "Advanced search with full-text search, multiple filters (status, priority, brand, creator, assignee, date range), and pagination",
        "files": [
          "frontend/src/pages/TicketsListPage.tsx",
          "backend/src/routes/tickets.ts"
        ]
      },
      {
        "name": "activity_timeline",
        "description": "Complete audit trail showing all ticket actions with actor details, timestamps, and payloads in chronological order",
        "files": [
          "frontend/src/pages/TicketDetailPage.tsx",
          "backend/src/routes/tickets.ts"
        ]
      },
      {
        "name": "user_management",
        "description": "Admin functionality to manage users, change passwords, and view system settings",
        "files": [
          "frontend/src/pages/UsersManagementPage.tsx",
          "frontend/src/pages/ChangePasswordPage.tsx",
          "frontend/src/pages/SystemSettingsPage.tsx",
          "backend/src/routes/users.ts",
          "backend/src/routes/admin.ts"
        ]
      },
      {
        "name": "role_based_access_control",
        "description": "Granular permissions enforced on both UI and API based on user roles with bidirectional workflow support",
        "files": [
          "backend/src/middleware/auth.ts",
          "backend/src/routes/tickets.ts",
          "frontend/src/stores/authStore.ts"
        ]
      }
    ],
    "database_schema": {
      "tables": [
        {
          "name": "users",
          "description": "User accounts with authentication",
          "key_columns": [
            "id",
            "email",
            "name",
            "role",
            "password_hash",
            "created_at",
            "updated_at"
          ]
        },
        {
          "name": "tickets",
          "description": "Main ticket data with lifecycle tracking and bidirectional support",
          "key_columns": [
            "id",
            "ticket_number",
            "created_by",
            "brand_name",
            "description",
            "issue_type",
            "expected_output",
            "priority",
            "status",
            "current_assignee",
            "primary_resolution_remarks",
            "resolution_remarks",
            "reopen_reason",
            "created_at",
            "updated_at"
          ]
        },
        {
          "name": "ticket_activities",
          "description": "Audit trail of all ticket actions",
          "key_columns": [
            "id",
            "ticket_id",
            "actor_id",
            "action",
            "comment",
            "payload",
            "created_at"
          ]
        },
        {
          "name": "attachments",
          "description": "File attachment metadata with upload context",
          "key_columns": [
            "id",
            "ticket_id",
            "filename",
            "file_size",
            "mime_type",
            "url",
            "upload_context",
            "uploaded_by",
            "created_at"
          ]
        },
        {
          "name": "deletion_requests",
          "description": "Peer-approval workflow for file deletion with OTP",
          "key_columns": [
            "id",
            "attachment_id",
            "ticket_id",
            "requester_id",
            "requester_reason",
            "requester_role",
            "approver_role",
            "status",
            "approved_by",
            "otp_code",
            "otp_expires_at",
            "created_at"
          ]
        }
      ]
    },
    "api_endpoints": {
      "authentication": [
        {
          "method": "POST",
          "path": "/api/auth/login",
          "description": "User login with email/password, returns JWT token"
        },
        {
          "method": "POST",
          "path": "/api/auth/register",
          "description": "Register new user (admin only)"
        },
        {
          "method": "GET",
          "path": "/api/users/me",
          "description": "Get current authenticated user"
        }
      ],
      "tickets": [
        {
          "method": "POST",
          "path": "/api/tickets",
          "description": "Create new ticket (Growth or Ops)"
        },
        {
          "method": "GET",
          "path": "/api/tickets",
          "description": "List tickets with filters and pagination"
        },
        {
          "method": "GET",
          "path": "/api/tickets/:ticket_number",
          "description": "Get ticket details with creator role"
        },
        {
          "method": "PATCH",
          "path": "/api/tickets/:ticket_number",
          "description": "Update ticket fields"
        },
        {
          "method": "POST",
          "path": "/api/tickets/:ticket_number/resolve",
          "description": "Add resolution (opposite team only)"
        },
        {
          "method": "POST",
          "path": "/api/tickets/:ticket_number/reopen",
          "description": "Reopen ticket (creator only)"
        },
        {
          "method": "POST",
          "path": "/api/tickets/:ticket_number/close",
          "description": "Close ticket (creator only)"
        },
        {
          "method": "GET",
          "path": "/api/tickets/:ticket_number/activities",
          "description": "Get activity timeline"
        }
      ],
      "attachments": [
        {
          "method": "POST",
          "path": "/api/tickets/:ticket_number/attachments",
          "description": "Upload files with context"
        },
        {
          "method": "POST",
          "path": "/api/attachments/:id/request-deletion",
          "description": "Request file deletion with reason"
        },
        {
          "method": "GET",
          "path": "/api/deletion-requests/pending",
          "description": "Get pending requests for approval"
        },
        {
          "method": "GET",
          "path": "/api/deletion-requests/my-requests",
          "description": "Get user's deletion requests"
        },
        {
          "method": "POST",
          "path": "/api/deletion-requests/:request_id/approve",
          "description": "Approve request and generate OTP"
        },
        {
          "method": "POST",
          "path": "/api/deletion-requests/:request_id/reject",
          "description": "Reject deletion request"
        },
        {
          "method": "DELETE",
          "path": "/api/attachments/:id",
          "description": "Delete file with OTP verification"
        }
      ],
      "admin": [
        {
          "method": "POST",
          "path": "/api/admin/tickets/:ticket_number/force-status",
          "description": "Admin force status change"
        }
      ]
    },
    "security_features": [
      "JWT token authentication with expiration",
      "bcrypt password hashing",
      "Role-based access control (RBAC) with bidirectional permissions",
      "Input validation with Zod schemas",
      "SQL injection prevention (parameterized queries)",
      "XSS protection",
      "Rate limiting on auth endpoints",
      "CORS configuration",
      "Security headers (Helmet.js)",
      "OTP verification for sensitive operations",
      "Peer-approval workflow for file deletion"
    ],
    "key_workflows": [
      {
        "name": "bidirectional_ticket_creation",
        "description": "Both Growth and Ops can create tickets escalated to opposite team",
        "steps": [
          "User (Growth or Ops) navigates to /tickets/new",
          "Fills in brand name, description, issue type, priority",
          "Optionally uploads primary files",
          "Submits form",
          "System generates unique ticket number (GROW-* or OPS-*)",
          "Ticket created with status 'open' and creator_role recorded",
          "Activity logged",
          "Redirects to ticket detail page"
        ]
      },
      {
        "name": "ticket_resolution_workflow",
        "description": "Opposite team adds resolution to open/reopened ticket",
        "steps": [
          "Opposite team member views ticket detail",
          "Enters resolution remarks",
          "Optionally uploads resolution files",
          "Submits resolution",
          "First resolution saved as primary_resolution_remarks",
          "Subsequent resolutions saved as resolution_remarks",
          "Ticket status changes to 'processed'",
          "User assigned to ticket",
          "Activity logged"
        ]
      },
      {
        "name": "ticket_reopen_workflow",
        "description": "Ticket creator reopens a processed ticket",
        "steps": [
          "Creator reviews processed ticket",
          "Enters reopen reason",
          "Optionally uploads reopen files",
          "Submits reopen request",
          "Ticket status changes to 're-opened'",
          "Activity logged",
          "Ticket returns to opposite team queue"
        ]
      },
      {
        "name": "file_deletion_approval",
        "description": "Peer-approval workflow for deleting attached files",
        "steps": [
          "User clicks delete icon on file",
          "Enters deletion reason",
          "Submits deletion request",
          "Request sent to opposite team for approval",
          "Approver reviews request and reason",
          "Approver approves and system generates 6-digit OTP",
          "OTP shared with requester",
          "Requester enters OTP",
          "System verifies OTP and deletes file",
          "Activity logged"
        ]
      }
    ],
    "test_coverage_areas": [
      "Authentication flow with valid and invalid credentials",
      "Role-based access control for both Growth and Ops",
      "Bidirectional ticket creation workflow",
      "Ticket status transitions in both directions",
      "Search and filtering with multiple criteria",
      "Activity timeline accuracy and completeness",
      "Form validation and error handling",
      "File upload with context categorization",
      "File deletion approval workflow with OTP",
      "Responsive UI on different screen sizes",
      "Security: SQL injection and XSS prevention",
      "Security: JWT token validation and expiration",
      "Security: Rate limiting enforcement"
    ]
  }
}

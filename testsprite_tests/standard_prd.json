{
  "meta": {
    "project": "Escalation Portal",
    "date": "2025-10-20",
    "prepared_by": "Generated by TestSprite"
  },
  "product_overview": "The Escalation Portal is a secure, bidirectional ticketing system designed to facilitate seamless escalation workflows between Growth and Operations teams at KNOT. It offers structured ticket lifecycle management, role-based access control, manager oversight, and real-time collaboration with a comprehensive audit trail.",
  "core_goals": [
    "Enable both Growth and Operations teams to create, escalate, and resolve tickets to and from each other.",
    "Provide managers with tools to oversee team workload, assign tickets, and monitor performance metrics.",
    "Ensure full accountability with detailed activity tracking and audit trails for all ticket actions.",
    "Streamline ticket resolution through a clearly defined status-driven lifecycle process with cross-team collaboration.",
    "Maintain strong security via JWT authentication, bcrypt password hashing, and role-based access control (RBAC)."
  ],
  "key_features": [
    "JWT-based authentication system with bcrypt password hashing supporting roles: growth, ops, admin, and manager with RBAC enforcement.",
    "Complete ticket management covering creation, assignment, resolution, reopening, and closure workflows with priority and status lifecycle.",
    "Manager-specific workflows including dashboards, incoming/outgoing ticket management, team performance analytics, and team member activation toggling.",
    "Team member dashboards with views for tickets assigned to them and those they created, with real-time status updates.",
    "Admin panel enabling user management, role promotions/demotions, force status change capabilities, and system configuration.",
    "File upload system integrating image and document compression, preview modal, and Supabase storage with CDN caching.",
    "Custom UI components like modals, custom checkboxes with gradients and animations, sidebar navigation, and page headers to ensure consistent design.",
    "Progressive Web App (PWA) support with offline fallback, install prompts, and fullscreen toggling for enhanced usability.",
    "Comprehensive API with endpoints for authentication, ticket operations, manager and admin workflows, and validation middleware for input correctness.",
    "Detailed logging, health monitoring endpoint, and input validation middlewares to ensure reliability and security."
  ],
  "user_flow_summary": [
    "User logs in via secure JWT authentication; roles determine accessible features and views.",
    "Growth and Ops team members create tickets containing required and optional fields with automatic ticket numbering and file attachments.",
    "Managers view incoming tickets from the opposite team and assign them to active team members; supports auto-assignment and bulk actions.",
    "Assigned team members process tickets by providing resolution remarks and optionally uploading files, changing status to processed.",
    "Creators review processed tickets to either accept and close or reopen for further resolution, with required reasons for reopening.",
    "Admins oversee and manage users, including promotions to manager roles, force status changes on tickets, and system settings adjustments.",
    "System provides real-time updates and auto-refresh (15 seconds default) for ticket lists and dashboards to maintain current information.",
    "Files attached are compressed client-side before upload, with previews and stored securely on Supabase with CDN caching."
  ],
  "validation_criteria": [
    "Authentication enforces JWT token expiration and prevents inactive users from logging in.",
    "Role-Based Access Control ensures users only perform actions permitted by their roles (e.g., managers cannot force status changes).",
    "Ticket lifecycle follows valid status transitions: open → processed, processed → closed or re-opened, with activity logging for every state change.",
    "Managers can assign tickets only to active users within their teams; error handling in place for invalid assignments.",
    "UI components render accurately across devices with consistent color schemes, animations, and accessibility.",
    "API endpoints validate inputs using Zod schemas and return consistent, meaningful error messages on validation failures.",
    "File uploads validate MIME type and enforce size limits (20MB per file, max 5 files), with compression verified.",
    "Automated tests cover unit, integration, end-to-end, and security scenarios such as SQL injection and unauthorized access attempts.",
    "PWA features operate correctly including offline fallback, install prompts, and service worker caching strategies.",
    "Performance targets met: page load < 2s, API response < 500ms p95, support 100 concurrent users, with pagination and real-time updates."
  ],
  "code_summary": {
    "tech_stack": [
      "TypeScript",
      "React 18",
      "Express.js",
      "PostgreSQL",
      "Vite",
      "Tailwind CSS",
      "Zustand",
      "TanStack Query",
      "JWT",
      "bcrypt",
      "Zod",
      "Axios",
      "Lucide React",
      "Winston",
      "Supabase",
      "PWA"
    ],
    "features": [
      {
        "name": "Authentication System",
        "description": "JWT-based authentication with bcrypt password hashing, role-based access control (RBAC) for growth, ops, admin, and manager roles",
        "files": [
          "frontend/src/pages/LoginPage.tsx",
          "frontend/src/services/authService.ts",
          "frontend/src/stores/authStore.ts",
          "backend/src/routes/auth.ts",
          "backend/src/middleware/auth.ts"
        ]
      },
      {
        "name": "Ticket Management",
        "description": "Complete ticket lifecycle management with creation, assignment, resolution, reopening, and closure workflows",
        "files": [
          "frontend/src/pages/CreateTicketPage.tsx",
          "frontend/src/pages/TicketDetailPage.tsx",
          "frontend/src/pages/TicketsListPage.tsx",
          "frontend/src/services/ticketService.ts",
          "backend/src/routes/tickets.ts",
          "backend/src/services/ticketService.ts"
        ]
      },
      {
        "name": "Manager Workflow",
        "description": "Manager-specific features including team oversight, ticket assignment, metrics dashboard, and team management",
        "files": [
          "frontend/src/pages/ManagerOverview.tsx",
          "frontend/src/pages/IncomingTickets.tsx",
          "frontend/src/pages/OutgoingTickets.tsx",
          "frontend/src/pages/TeamPerformance.tsx",
          "frontend/src/pages/TeamManagementPage.tsx",
          "frontend/src/services/managerService.ts",
          "backend/src/routes/managers.ts",
          "backend/src/services/managerService.ts"
        ]
      },
      {
        "name": "Team Member Dashboard",
        "description": "Team member-specific views for assigned tickets, created escalations, and work overview",
        "files": [
          "frontend/src/pages/MyWork.tsx",
          "frontend/src/pages/AssignedToMe.tsx",
          "frontend/src/pages/MyEscalations.tsx",
          "frontend/src/pages/DashboardPage.tsx"
        ]
      },
      {
        "name": "Admin Panel",
        "description": "Administrative features for user management, system settings, and force status changes",
        "files": [
          "frontend/src/pages/AdminDashboard.tsx",
          "frontend/src/pages/UsersManagementPage.tsx",
          "frontend/src/pages/SystemSettingsPage.tsx",
          "frontend/src/components/AdminStatusManager.tsx",
          "frontend/src/services/adminService.ts",
          "backend/src/routes/admin.ts"
        ]
      },
      {
        "name": "File Upload System",
        "description": "File attachment system with compression, preview, and Supabase storage integration",
        "files": [
          "frontend/src/components/FileUpload.tsx",
          "frontend/src/components/FilePreviewModal.tsx",
          "frontend/src/services/attachmentService.ts",
          "frontend/src/utils/imageCompression.ts",
          "backend/src/routes/attachments.ts",
          "backend/src/config/storage.ts"
        ]
      },
      {
        "name": "UI Components",
        "description": "Reusable UI components including modals, custom checkboxes, sidebar navigation, and page headers",
        "files": [
          "frontend/src/components/Modal.tsx",
          "frontend/src/components/CustomCheckbox.tsx",
          "frontend/src/components/Sidebar.tsx",
          "frontend/src/components/PageHeader.tsx",
          "frontend/src/components/AssignmentModal.tsx",
          "frontend/src/hooks/useModal.ts"
        ]
      },
      {
        "name": "Progressive Web App",
        "description": "PWA features including manifest, service worker, offline support, and install prompts",
        "files": [
          "frontend/src/components/PWAInstallPrompt.tsx",
          "frontend/src/components/FullscreenToggle.tsx",
          "frontend/public/manifest.json",
          "frontend/public/sw.js",
          "frontend/public/offline.html"
        ]
      },
      {
        "name": "User Profile Management",
        "description": "User profile features including profile picture upload, name updates, and password changes",
        "files": [
          "frontend/src/pages/UserProfilePage.tsx",
          "frontend/src/pages/ChangePasswordPage.tsx",
          "frontend/src/services/userService.ts",
          "backend/src/routes/users.ts"
        ]
      },
      {
        "name": "Deletion Requests",
        "description": "Ticket deletion request system with approval workflow",
        "files": [
          "frontend/src/pages/DeletionRequestsPage.tsx"
        ]
      },
      {
        "name": "Health Monitoring",
        "description": "Health check endpoint for uptime monitoring and preventing cold starts",
        "files": [
          "backend/src/routes/health.ts"
        ]
      },
      {
        "name": "Database Services",
        "description": "Database configuration, connection management, and query utilities",
        "files": [
          "backend/src/config/database.ts",
          "backend/src/utils/logger.ts"
        ]
      },
      {
        "name": "Validation Middleware",
        "description": "Input validation using Zod schemas for API endpoints",
        "files": [
          "backend/src/middleware/validation.ts"
        ]
      },
      {
        "name": "Error Handling",
        "description": "Centralized error handling middleware for API responses",
        "files": [
          "backend/src/middleware/errorHandler.ts"
        ]
      },
      {
        "name": "Utility Functions",
        "description": "Helper utilities for issue type labels and image compression",
        "files": [
          "frontend/src/utils/issueTypeLabels.ts",
          "frontend/src/utils/imageCompression.ts"
        ]
      },
      {
        "name": "Type Definitions",
        "description": "TypeScript type definitions for frontend and backend",
        "files": [
          "frontend/src/types/index.ts",
          "backend/src/types/index.ts"
        ]
      },
      {
        "name": "Database Seeding",
        "description": "Database seeding script for creating sample users and tickets",
        "files": [
          "backend/src/scripts/seed.ts"
        ]
      }
    ]
  }
}

[
  {
    "id": "TC001",
    "title": "Successful login with valid credentials and role enforcement",
    "description": "Verify that a user can log in with correct username and password, JWT token is issued, and role-based access control permits appropriate feature access.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to the login page"
      },
      {
        "type": "action",
        "description": "Enter valid username and password for a growth team member"
      },
      {
        "type": "action",
        "description": "Click the login button"
      },
      {
        "type": "assertion",
        "description": "Check that login is successful and JWT token is received"
      },
      {
        "type": "assertion",
        "description": "Verify user is directed to growth team dashboard with correct role permissions"
      },
      {
        "type": "action",
        "description": "Repeat for ops, admin, and manager roles"
      },
      {
        "type": "assertion",
        "description": "Confirm respective role-based views and access controls apply"
      }
    ]
  },
  {
    "id": "TC002",
    "title": "Login failure with invalid credentials and inactive user",
    "description": "Verify that login is prevented with incorrect credentials and inactive user status.",
    "category": "error handling",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to the login page"
      },
      {
        "type": "action",
        "description": "Enter invalid username and/or password"
      },
      {
        "type": "action",
        "description": "Click login button"
      },
      {
        "type": "assertion",
        "description": "Verify login is rejected with appropriate error message"
      },
      {
        "type": "action",
        "description": "Attempt login with valid credentials of an inactive user"
      },
      {
        "type": "assertion",
        "description": "Verify login is rejected due to inactive user status"
      }
    ]
  },
  {
    "id": "TC003",
    "title": "Ticket creation with required and optional fields including file attachments",
    "description": "Validate that members from growth and ops teams can create tickets with correct fields, automatic ticket numbering, and file attachments with compression and preview.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Log in as growth team member"
      },
      {
        "type": "action",
        "description": "Navigate to the create ticket page"
      },
      {
        "type": "action",
        "description": "Fill in required fields for a new ticket"
      },
      {
        "type": "action",
        "description": "Upload one or multiple valid files including images and documents"
      },
      {
        "type": "assertion",
        "description": "Verify files are compressed client-side and preview modal is displayed correctly"
      },
      {
        "type": "action",
        "description": "Submit the ticket"
      },
      {
        "type": "assertion",
        "description": "Verify ticket is created with automatic ticket number"
      },
      {
        "type": "assertion",
        "description": "Confirm files are stored in Supabase with CDN caching"
      },
      {
        "type": "action",
        "description": "Repeat ticket creation with ops team member"
      }
    ]
  },
  {
    "id": "TC004",
    "title": "Ticket lifecycle status transitions and activity logging",
    "description": "Ensure tickets follow the correct status transitions (open → processed → closed/re-opened) with full logging of all state changes.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Create and open a new ticket as a growth user"
      },
      {
        "type": "action",
        "description": "Manager assigns the ticket to an active ops user"
      },
      {
        "type": "assertion",
        "description": "Verify ticket status changes to assigned and logged"
      },
      {
        "type": "action",
        "description": "Assigned ops user processes the ticket by adding resolution remarks and uploading files"
      },
      {
        "type": "assertion",
        "description": "Ensure ticket status updates to processed and all changes are logged"
      },
      {
        "type": "action",
        "description": "Creator reviews processed ticket and accepts to close it"
      },
      {
        "type": "assertion",
        "description": "Verify ticket status updates to closed and activity is logged"
      },
      {
        "type": "action",
        "description": "Creator reopens the ticket with a required reason"
      },
      {
        "type": "assertion",
        "description": "Confirm status changes to open and reopening reason is recorded"
      }
    ]
  },
  {
    "id": "TC005",
    "title": "Managers assign tickets only to active users with error handling",
    "description": "Validate that managers can assign incoming tickets to active team members only, and proper error messages are shown if assigning to inactive or invalid users.",
    "category": "error handling",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Log in as manager"
      },
      {
        "type": "action",
        "description": "Navigate to incoming tickets list"
      },
      {
        "type": "action",
        "description": "Attempt to assign ticket to an active team member"
      },
      {
        "type": "assertion",
        "description": "Verify assignment succeeds and status updates appropriately"
      },
      {
        "type": "action",
        "description": "Attempt to assign ticket to an inactive user"
      },
      {
        "type": "assertion",
        "description": "Verify assignment is rejected with appropriate error message"
      },
      {
        "type": "action",
        "description": "Attempt to assign ticket to invalid/non-existent user"
      },
      {
        "type": "assertion",
        "description": "Verify assignment is rejected with appropriate error message"
      }
    ]
  },
  {
    "id": "TC006",
    "title": "RBAC enforcement across user roles for key operations",
    "description": "Verify that role-based access control enforces permissions such that users can only perform actions allowed by their roles including preventing managers from force status changes and admins performing admin tasks.",
    "category": "security",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Log in as manager"
      },
      {
        "type": "action",
        "description": "Attempt to perform a force status change on a ticket"
      },
      {
        "type": "assertion",
        "description": "Verify access is denied and appropriate error is returned"
      },
      {
        "type": "action",
        "description": "Log in as admin"
      },
      {
        "type": "action",
        "description": "Perform force status change and user role promotions"
      },
      {
        "type": "assertion",
        "description": "Verify actions succeed with correct audit logging"
      },
      {
        "type": "action",
        "description": "Try restricted actions as growth and ops users"
      },
      {
        "type": "assertion",
        "description": "Confirm access denied on any admin/manager-only operations"
      }
    ]
  },
  {
    "id": "TC007",
    "title": "File upload validation, compression, preview, and storage integration",
    "description": "Test that file uploads respect MIME type restrictions, size limits (max 20MB per file, max 5 files), compression happens client-side, preview modal works, and files are securely stored on Supabase with CDN caching.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to the ticket creation or ticket processing page"
      },
      {
        "type": "action",
        "description": "Attempt to upload more than 5 files"
      },
      {
        "type": "assertion",
        "description": "Verify upload is rejected with error about maximum file count"
      },
      {
        "type": "action",
        "description": "Attempt to upload a file larger than 20MB"
      },
      {
        "type": "assertion",
        "description": "Verify upload is rejected with error about file size"
      },
      {
        "type": "action",
        "description": "Upload supported image and document files"
      },
      {
        "type": "assertion",
        "description": "Verify files are compressed client-side and preview modal displays correctly"
      },
      {
        "type": "action",
        "description": "Submit the ticket or update"
      },
      {
        "type": "assertion",
        "description": "Verify files are stored on Supabase and accessible via CDN URLs"
      }
    ]
  },
  {
    "id": "TC008",
    "title": "UI components render correctly across devices and support accessibility",
    "description": "Check that custom UI components such as modals, checkboxes with animations, sidebar navigation, and page headers render accurately on different device screen sizes with consistent colors, animations, and keyboard accessibility.",
    "category": "ui",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Open application on desktop, tablet, and mobile devices"
      },
      {
        "type": "assertion",
        "description": "Verify sidebar navigation displays correctly and is responsive"
      },
      {
        "type": "assertion",
        "description": "Check modals open and close smoothly with animations"
      },
      {
        "type": "assertion",
        "description": "Test custom checkboxes show gradients and animations upon interactions"
      },
      {
        "type": "action",
        "description": "Navigate using keyboard only"
      },
      {
        "type": "assertion",
        "description": "Ensure focus indicators are visible and navigation is operational"
      }
    ]
  },
  {
    "id": "TC009",
    "title": "API input validation and error message consistency",
    "description": "Verify that all API endpoints validate inputs using Zod schemas and return consistent, meaningful error messages upon validation failures.",
    "category": "error handling",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Send API requests with missing required fields to authentication, ticket, manager, and admin endpoints"
      },
      {
        "type": "assertion",
        "description": "Verify validation errors are returned with clear messages in JSON response"
      },
      {
        "type": "action",
        "description": "Send requests with invalid data types or formats"
      },
      {
        "type": "assertion",
        "description": "Confirm proper validation error messages and HTTP status codes"
      },
      {
        "type": "action",
        "description": "Attempt SQL injection or malformed inputs"
      },
      {
        "type": "assertion",
        "description": "Validate requests are blocked and safe error responses are returned"
      }
    ]
  },
  {
    "id": "TC010",
    "title": "PWA features: offline fallback, install prompts, and fullscreen toggle",
    "description": "Ensure Progressive Web App functionality works including offline fallback page loading, install prompt appears on supported devices, and fullscreen toggling operates as intended.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Load the app in a supported browser and simulate offline mode"
      },
      {
        "type": "assertion",
        "description": "Verify offline fallback page loads when network is unavailable"
      },
      {
        "type": "action",
        "description": "Trigger install prompt on supported device or browser"
      },
      {
        "type": "assertion",
        "description": "Confirm user sees install prompt and can install the PWA"
      },
      {
        "type": "action",
        "description": "Use fullscreen toggle feature"
      },
      {
        "type": "assertion",
        "description": "Verify UI enters and exits fullscreen mode correctly"
      }
    ]
  },
  {
    "id": "TC011",
    "title": "Manager dashboard functionality with team performance and member activation toggling",
    "description": "Validate that managers can access dashboards showing incoming/outgoing tickets, view team performance analytics, and toggle activation status for team members with immediate effect.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Log in as manager and open the manager overview page"
      },
      {
        "type": "assertion",
        "description": "Verify incoming and outgoing tickets lists display correctly with real-time updates"
      },
      {
        "type": "action",
        "description": "Navigate to team performance analytics page"
      },
      {
        "type": "assertion",
        "description": "Confirm performance metrics render correctly and data is accurate"
      },
      {
        "type": "action",
        "description": "Navigate to team management page"
      },
      {
        "type": "action",
        "description": "Toggle activation status for a team member"
      },
      {
        "type": "assertion",
        "description": "Verify user status changes effectively and reflects in assignment operations"
      }
    ]
  },
  {
    "id": "TC012",
    "title": "Admin panel user management and system settings updates",
    "description": "Confirm that admins can manage users including promotions/demotions, force status changes on tickets, and adjust system configuration with proper validation and audit logging.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Log in as admin and navigate to the users management page"
      },
      {
        "type": "action",
        "description": "Promote a regular user to manager role"
      },
      {
        "type": "assertion",
        "description": "Verify role update takes effect and user receives appropriate permissions"
      },
      {
        "type": "action",
        "description": "Perform force status change on a selected ticket"
      },
      {
        "type": "assertion",
        "description": "Confirm status change is applied and logged with admin attribution"
      },
      {
        "type": "action",
        "description": "Navigate to system settings page and update configurations"
      },
      {
        "type": "assertion",
        "description": "Verify settings save successfully and validation prevents invalid inputs"
      }
    ]
  },
  {
    "id": "TC013",
    "title": "Real-time ticket list updates and auto-refresh functionality",
    "description": "Test that ticket lists and dashboards refresh automatically every 15 seconds with current data to maintain real-time collaboration.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Log in and open ticket list page"
      },
      {
        "type": "action",
        "description": "Simulate ticket status change from another user"
      },
      {
        "type": "assertion",
        "description": "Verify ticket list auto-refreshes within 15 seconds showing updated status"
      }
    ]
  },
  {
    "id": "TC014",
    "title": "Health check endpoint responds correctly",
    "description": "Verify backend health monitoring API endpoint returns status for uptime monitoring and prevents cold starts.",
    "category": "functional",
    "priority": "Low",
    "steps": [
      {
        "type": "action",
        "description": "Send GET request to health check endpoint"
      },
      {
        "type": "assertion",
        "description": "Verify response status is 200 and contains expected uptime and service info"
      }
    ]
  },
  {
    "id": "TC015",
    "title": "Security tests to prevent unauthorized access and SQL injection attempts",
    "description": "Ensure unauthorized users cannot access protected resources and inputs vulnerable to SQL injection are sanitized or blocked.",
    "category": "security",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Attempt to access ticket management API without JWT token"
      },
      {
        "type": "assertion",
        "description": "Verify access is denied with 401 Unauthorized"
      },
      {
        "type": "action",
        "description": "Send API requests containing SQL injection payloads in input fields"
      },
      {
        "type": "assertion",
        "description": "Confirm inputs are sanitized, and requests fail safely without database compromise"
      }
    ]
  },
  {
    "id": "TC016",
    "title": "Page load and API response performance under concurrent load",
    "description": "Verify system performance goals are met: page load under 2s, API 95th percentile response under 500ms, support for at least 100 concurrent users with stable pagination and real-time updates.",
    "category": "performance",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Simulate 100 concurrent users accessing the application"
      },
      {
        "type": "assertion",
        "description": "Measure page load times ensuring <2 seconds"
      },
      {
        "type": "assertion",
        "description": "Monitor API response times and confirm p95 under 500ms"
      },
      {
        "type": "action",
        "description": "Test pagination and real-time ticket list updates under load"
      },
      {
        "type": "assertion",
        "description": "Verify UI remains responsive and accurate"
      }
    ]
  }
]
